package jku.se.Controller;

import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import jku.se.*;
import jku.se.repository.InvoiceRepository;
import jku.se.repository.UserRepository;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Controller class for admin invoice management.
 * Allows admins to search, edit, accept, decline, or delete invoices from users.
 */

public class AdminInvoiceManagementController {
    private static final Logger LOGGER = Logger.getLogger(AdminInvoiceManagementController.class.getName());

    @FXML private ComboBox<Invoice> selectInvoice;
    @FXML private ComboBox<String> selectUser;
    @FXML private TextField amountField;
    @FXML private TextField reimbursementField;
    @FXML private DatePicker invoiceDateField;
    @FXML private ComboBox<String> categoryCombobox;
    @FXML private Button changeButton;
    @FXML private Button invoiceAcceptButton;
    @FXML private Button declinedButton;
    @FXML private Button deleteButton1;
    @FXML private Label statusLabel;

    /**
     * Initializes the controller.
     * Populates user ComboBox and sets listeners for invoice selection.
     */
    @FXML
    public void initialize() {
        List<String> emails = UserRepository.getAllUserEmails();
        selectUser.setItems(FXCollections.observableArrayList(emails));
        selectUser.setOnAction(e -> {
            searchInvoice(new ActionEvent());
        });
        //generated by AI
        //load details of invoice
        selectInvoice.setOnAction(e -> {
            Invoice selectedInvoice = selectInvoice.getValue();
            if (selectedInvoice != null) {
                amountField.setText(String.valueOf(selectedInvoice.getAmount()));
                reimbursementField.setText(String.valueOf(selectedInvoice.getReimbursement()));
                invoiceDateField.setValue(selectedInvoice.getDate());
                categoryCombobox.setValue(selectedInvoice.getCategory().name());
            }
            categoryCombobox.setItems(FXCollections.observableArrayList(
                    "SUPERMARKET", "RESTAURANT"
            ));
        });
    }

    /**
     * Loads all users except the currently logged-in admin into the user selection ComboBox. (without his own email)
     *
     * @param event the triggering ActionEvent
     * @throws IOException if loading user data fails
     */
    @FXML
    private void searchUser(ActionEvent event) throws IOException {
        List<String> emails = UserRepository.getAllUsersWithoutLoggedAdmin(UserDashboardController.getCurrentUserEmail());

        selectUser.setItems(FXCollections.observableArrayList(emails));
    }

    /**
     * Loads all invoices for the selected user and fills the invoice ComboBox.
     *
     * @param event the triggering ActionEvent
     */
    @FXML
    private void searchInvoice(ActionEvent event) {
        String selectedUserEmail = selectUser.getValue();
        if (LOGGER.isLoggable(Level.INFO)) {
            LOGGER.info("Selected user email: " + selectedUserEmail); // Debug
        }

        if (selectedUserEmail == null || selectedUserEmail.isEmpty()) {
            showAlert(Alert.AlertType.ERROR, "User Error", "Please select an user first.");
            return;
        }

        List<Invoice> invoices = InvoiceRepository.getAllInvoicesUser(selectedUserEmail);

        selectInvoice.setItems(FXCollections.observableArrayList(invoices));
    }

    /**
     * Allows the admin to modify the selected invoice's amount, date, category, and status.
     * Performs validation and saves changes to the database.
     *
     * @param event the triggering ActionEvent
     */
    @FXML
    private void changeInvoiceDetails(ActionEvent event) {

        Invoice selectedInvoice = selectInvoice.getValue();

        if (selectedInvoice == null) {
            showAlert(Alert.AlertType.ERROR, "Validation Error", "Please select an invoice to update.");
            return;
        }
        //save old and new date for changing date
        LocalDate oldDate = selectedInvoice.getDate();

        //check if invoice is in current month
        LocalDate now = LocalDate.now();
        if(!selectedInvoice.isInCurrentMonth(oldDate, now)){
            showAlert(Alert.AlertType.ERROR, "Validation Error", "The invoice can no longer be changed - only possible in the current month!");
            return;
        }

        if (selectedInvoice != null) {
            try {
                double newAmount = Double.parseDouble(amountField.getText());
                String newCategory = categoryCombobox.getValue();
                LocalDate newDate = invoiceDateField.getValue();

                if (!selectedInvoice.isValidAmount(newAmount)) {
                    showAlert(Alert.AlertType.ERROR, "Validation Error", "Amount must be greater than 0 and less than 1000!");
                    return;
                }

                selectedInvoice.setAmount(newAmount);
                selectedInvoice.setCategory(Category.valueOf(newCategory));

                if(!selectedInvoice.isDateOnWeekday(newDate)){
                    showAlert(Alert.AlertType.ERROR, "Validation Error", "Invoice date must be a weekday!");
                    return;
                }
                // Check if date changed - AI generated
                if (!newDate.equals(oldDate)) {
                    try (Connection con = DatabaseConnection.getConnection()) {
                        boolean exists = InvoiceRepository.invoiceExists(con, selectedInvoice.getUserEmail(), java.sql.Date.valueOf(newDate));
                        if (exists) {
                            showAlert(Alert.AlertType.ERROR, "Validation Error", "An invoice already exists for this user on the selected date.");
                            return;
                        }
                    } catch (SQLException e) {

                        showAlert(Alert.AlertType.ERROR, "Database Error", "Database error: " + e.getMessage());
                        return;
                    }
                }
                selectedInvoice.setDate(newDate);
                selectedInvoice.setStatus(Status.PROCESSING);  // after update invoice details set status to processing

                //after changing category or amount - change reimbursement
                double newReimbursement = selectedInvoice.calculateRefund();
                selectedInvoice.setReimbursement(newReimbursement);

                InvoiceRepository.updateInvoiceAmount(selectedInvoice);
                InvoiceRepository.updateInvoiceCategory(selectedInvoice);
                InvoiceRepository.updateInvoiceDate(selectedInvoice);
                InvoiceRepository.updateInvoiceStatus(selectedInvoice);
                InvoiceRepository.updateInvoiceReimbursement(selectedInvoice);
                showAlert(Alert.AlertType.INFORMATION, "Success", "Invoice updated successfully.");


                //Update data output in JAVAFX
                amountField.setText(String.valueOf(selectedInvoice.getAmount()));
                reimbursementField.setText(String.valueOf(selectedInvoice.getReimbursement()));
                invoiceDateField.setValue(selectedInvoice.getDate());
                categoryCombobox.setValue(selectedInvoice.getCategory().name());
            } catch (Exception e) {
                showAlert(Alert.AlertType.ERROR, "Update Error", "Update failed: " + e.getMessage());

            }
        }

    }

    /**
     * Approves the selected invoice, updates the status in the database,
     * and notifies the corresponding user.
     *
     * @param event the triggering ActionEvent
     * @throws SQLException if the update fails
     */
    @FXML
    private void handleAcceptInvoice(ActionEvent event) throws SQLException {
        Invoice selectedInvoice = selectInvoice.getValue();

        if (selectedInvoice != null) {
            selectedInvoice.setStatus(Status.APPROVED);
            InvoiceRepository.updateInvoiceStatus(selectedInvoice);
            UserRepository.getByEmail(selectedInvoice.getUserEmail());
            new Notification("Your invoice from " + selectedInvoice.getCreatedAtString() + " was approved.");
            showAlert(Alert.AlertType.INFORMATION, "Success", "Invoice accepted successfully.");

        }
    }

    /**
     * Declines the selected invoice, updates the status in the database,
            * and notifies the corresponding user.
     *
             * @param event the triggering ActionEvent
     * @throws SQLException if the update fails
     */
    @FXML
    private void handleDeclinedInvoice(ActionEvent event) throws SQLException {
        Invoice selectedInvoice = selectInvoice.getValue();

        if (selectedInvoice != null) {
            selectedInvoice.setStatus(Status.DECLINED);
            InvoiceRepository.updateInvoiceStatus(selectedInvoice);
            UserRepository.getByEmail(selectedInvoice.getUserEmail());
            new Notification("Your invoice from " + selectedInvoice.getCreatedAtString() + " was rejected.");
            showAlert(Alert.AlertType.WARNING, "Invoice Declined", "Invoice was declined.");

        }
    }

    /**
     * Deletes the selected invoice from the database.
     *
     * @param event the triggering ActionEvent
     * @throws SQLException if the deletion fails
     */
    @FXML
    private void handleDeleteInvoice(ActionEvent event) throws SQLException{
        Invoice selectedInvoice = selectInvoice.getValue();

        if (selectedInvoice != null) {
            InvoiceRepository.deleteInvoice(selectedInvoice);
            showAlert(Alert.AlertType.INFORMATION, "Invoice Deleted", "Invoice was deleted.");

        }
    }

    /**
     * Returns to the admin dashboard screen.
     *
     * @param event the triggering ActionEvent
     * @throws IOException if loading the dashboard fails
     */
    @FXML
    private void cancelEditAdmin(ActionEvent event) throws IOException {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/dashboard2.fxml"));
            Scene scene = new Scene(loader.load());

            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();

            stage.setScene(scene);
            stage.show();
    }

    /**
     * Displays a JavaFX Alert dialog with a specified type, title and message.
     *
     * @param type the type of alert (e.g., INFORMATION, ERROR)
     * @param title the title of the alert dialog
     * @param message the message to display
     */
    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}


